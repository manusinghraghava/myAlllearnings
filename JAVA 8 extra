JAVA 8 Extra===>

a)we can override default methods.but remember to remove default keyword in subclass.as default is only for interface.
we must override default method if subclass implementing two interfaces with same default method.

b)lambda will not create any extra .class file like anonymous on compilation.

c)we can declare object class absract methods in functional Interface.

d)we cannot use this in lambda expression....but can in anonymous.

e)if we use anything inside which throws checked exception..we have to handle it...using throws keyword of calling method will not work because lambda is a type of inner class.

f)for checked exception we can create our own functional interface with a abstract method having throws keyword.

g)once stream is consumed u cannot used it again

h)infinite Streams-->
Stream<Integer> infinite = stream.iterate(0,i->i+2);  ///iterate will create an infinite stream.starting o with 2 increment
iterate.limit(10).collect(Collectors.toList())//////collecting from infinite stream.

use generate() instead of iterate for objects.

i)Random class we can also use to generate'stream of random long,integer.
Random random - new Random();
DoubleStream doublestream =random.doubles(3);   ///create 3 random doubles in stream

j)Stream of files---> we can make stream of data of files now in java 8.

Path path =Paths.get(//url);
Stream<String> fileStream =files.lines(path);

we can also define Charset--->

Stream<String> fileStream =Files.lines(path,Charset.forName('UTF-8'));

k)OptionalInt reduced = IntStream.range(1,4).reduce((a,b)->a+b);   /////reducing to a single value after accumulating...
reduced.getAsInt()   /////6  ----------->1+2+3.


reduced = IntStream.range(1,4).reduce(10,(a,b)->a+b);   ///another overriden method it will add 10 in result.


------------------------------
Date and Time in java 8.

LocalDate--->date in iso format(yyyy-MM-dd)  without time.

LocalDate date =LocalDate.now();

second overloaded method.

ZoneId id =ZoneId.of(///anyId);
LocalDate date =LocalDate.now(id);


LocalDate date =LocalDate.of(year,month,day);  ///for specific date.

LocalDate date =LocalDate.parse(string in iso format)...///creating date via string.

api methods we can use also like...plusDays(),

also minusDays like this...

and also we have common method minus(int value,ChronoUnit.Days)....////work on all.

getDayOfWeek();   //string value like MOnday
getDayofMonth(); 1-30
getDayOfYear(); 1-365

isLeapYear()....//to check leap year or not.

isBefore()....//boolean value also vice-versa is there.

atStartOfDay()....///////will move u to 00:00 time for date.

with(TemporalAdjusters.firstDayOfMonth()).  ////////will move local date to first date of month.

=====
LocalTime---->represents local time without date

methods are all same as LocalDate. but work on time.
=========
LocalDateTime Api--->
Give Combination of Date and Time.

LocalDateTime local = LocalDateTime.now();

//give current date and time.

All methods are common.

Example-->
LocalDateTime local =LocalDateTime.of(2015,Month.FEBRUARY,20,06,30,15);

===========================
ZonedDateTimeApi--->when we used to deal with a specific zone on given date and time.

We mainly used ZoneId side by side here.

ZoneId id =ZoneId.of(///anyId);

Set<String> zoneIDs = ZoneId.getAvailableZoneIds();   //to fetch all zone ids.

ZonedDateTime time = ZonedDateTime.of(LocalDateTime.now(),id)   //creating on specific zone.

ZoneOffset  /////we use when we increase some hours according for a givenZOne...

============================================================================================

Period And Duration--->

Period--->when we want to fetch time in case of months,years and days.
Duration--->when we want to fetch time in terms of hours,minutes,seconds.

int Days =Period.between(LocalDate.now(),LocalDate.now().plus(Period.ofDays(5))).getDays();

also we can use ChronoUnit in this case.

int Days =ChronoUnit.Days.between(date1,date2);

Similiar we can use Duration for Time--->

int seconds =Duration.between(LocalTime.now(),LocalTime.now().plus(Duration.ofSeconds(5))).getSeconds();


=============================================================================
Java 8 has introduced new feature to convert old Date and Calender instance into new LocalDateTime.
For this we use toInstant() method.

LocalTime.ofInstant(date.toInstant(),ZoneId.systemDefaults());//////same for calender object using default zoneId.

========================================================================================
Date and Time Formatting--->

localDateTime.format(DateTimeFormatter.ISO_date)     ///will convert into iso format.

localDateTime.format(DateTimeFormatter.ofPattern("PATTERN_LIKE_SDF"))

================================================================================================================================
to print month name we will use
     Calendar c = Calendar.getInstance();
	 or
	 DateUtils.toCalendar(Date date)   ////changing date to calender
System.out.println(c.getDisplayName(Calendar.MONTH, Calendar.SHORT, Locale.ENGLISH ) );

=================================================================================================================================
Nashorn-->A new java script eingine

ScriptEingineManager eingineManager =new ScriptEingineManager();
ScriptEingine eingine = ScriptEingineManager.getEingineByNAme('nashorn');

eingine.eval('pass javascript in this.');
eingine.eval(new FileReader(fileName));   ///to read js from file.

we can also invoke function of js from java code-->

Invocable invoke=(Invocable)eingine;
invoke.invokeFunction(functionName,Parametre);

=================================================================================================================================

Creating Custom Annotation.

we can use annotation on method,class and fields.

we use @interface to create custom annotation.

@Inherited                                           //if we will use it on parent class all child class also have to use it
@Retention(RetentionPolicy.RUNTIME)                  //retention policy
@Target(ElementType.METHOD)                          //annotation type works only with class.
public @interface EnableAltDataSource {
}



======================================================================================================
Some extra methods of ootb Functional Interface--->

i)Predicate-->
and()--->
negate()---->
import java.util.function.Predicate; 
public class PredicateInterfaceExample2 { 
    public static void main(String[] args) 
    { 
        Predicate<Integer> greaterThanTen = (i) -> i > 10; 
  
        // Creating predicate 
        Predicate<Integer> lowerThanTwenty = (i) -> i < 20;  
        boolean result = greaterThanTen.and(lowerThanTwenty).test(15);    //like and there is or also.
        System.out.println(result); 
  
        // Calling Predicate method 
        boolean result2 = greaterThanTen.and(lowerThanTwenty).negate().test(15); 
        System.out.println(result2); 
    } 
} 

Output:

True
False


ii)Function-->
compose()
then()


What is function composition?
It all has to do with creating small reusable functions that you can combine to compose new functions.

Now, how can we achieve this using compose and andThen?
Let's first define two simple functions - times2 and squared.

Function<Integer, Integer> times2 = e -> e * 2;

Function<Integer, Integer> squared = e -> e * e;  
Next, let's combine them, using compose and andThen.

times2.compose(squared).apply(4);  
// Returns 32

times2.andThen(squared).apply(4);  
// Returns 64
As you can see, the difference between compose and andThen is the order they execute the functions. While the compose function executes the caller last and the parameter first, the andThen executes the caller first and the parameter last.


collection-->
Map--->
compute(),computeIfPresent(),computeIfAbsent()////want to do some computation of specific key...
  // remap the values using compute() method 
        map.compute("Name", (key, val) 
                                -> val.concat(" Singh")); 
        map.compute("Address", (key, val) 
                                   -> val.concat(" West-Bengal")); 
								   

merge()	---->

map.merge(key,value,bifunction)

if key is not present it will add ...
if key is present than bi function comes in picture and u can decide which value u have to put....ao any computation on value.							   
================================================================================================================================
New methods -->
Collection-->removeIf(Predicate s)  ///now present in all collections. like list.

Map-->
getOrDefault()---------->if value 
putIfAbsent()----------->as old put replace the value from new one if key is present..this will prevent it.
replaceAll(Bifunction)------>replace all values for given biFunction.
remove(Key,value)-->  as first only work on key....now it is on both.
replace(key,oldValue,NewValue)--->some extension of put pethod work only on given Value.....

public static <T> Collection<T> emptyIfNull(Collection<T> collection)
Returns an immutable empty collection if the argument is null, or the argument itself otherwise.
Type Parameters:
T - the element type
Parameters:
collection - the collection, possibly null
Returns:
an empty collection if the argument is null
========================================================================================================================================
PermGen is an abbreviation for Permanent Generation and it's a special heap space which is separate from the main Java heap where JVM keeps track of metadata of the classes which have been loaded. In Java 8, PermGen has been renamed to Metaspace - with some subtle differences.

Metaspace is introduced in native memory with default unlimited space due to which u will not get outofmemory error.

Very quickly: The heap memory is the memory allocated to the java process by the -xMx parameter whereas the native memory is the memory available to the OS.

Constant pool and jit also shifted to metaspace

check heap dumps-->

to do lATER
====================================================================================================================================
ConcurrentHashMap--->it is a new version of hashtable but in place of locking on all map.it will make synchronized a bucket or a part.
read access is concurrently without any blocking.but writable not.
its for each method is fail safe means dont throw concurrentmodificationexception.

Key points of ConcurrentHashMap:  

The underlined data structure for ConcurrentHashMap is Hashtable.
ConcurrentHashMap class is thread-safe i.e. multiple threads can operate on a single object without any complications.
At a time any number of threads are applicable for a read operation without locking the ConcurrentHashMap object which is not there in HashMap.
In ConcurrentHashMap, the Object is divided into a number of segments according to the concurrency level.
The default concurrency-level of ConcurrentHashMap is 16.
In ConcurrentHashMap, at a time any number of threads can perform retrieval operation but for updation in the object, the thread must lock the particular segment in which the thread wants to operate. This type of locking mechanism is known as Segment locking or bucket locking. Hence at a time, 16 update operations can be performed by threads.

*******Inserting null objects is not possible in ConcurrentHashMap as key or value.****

Concurrency-Level: It is the number of threads concurrently updating the map. The implementation performs internal sizing to try to accommodate this many threads.
Load-Factor: It’s a threshold, used to control resizing.
Initial Capacity: Accommodation of a certain number of elements initially provided by the implementation. if the capacity of this map is 10. It means that it can store 10 entries.
1. ConcurrentHashMap() : Creates a new, empty map with a default initial capacity (16), load factor (0.75) and concurrencyLevel (16).

  ConcurrentHashMap<Integer, String> m = new ConcurrentHashMap<>(); 
            
          // Insert mappings using  
          // put method 
        m.put(100, "Hello"); 
        m.put(101, "Geeks"); 
        m.put(102, "Geeks"); 
  
        // Here we cant add Hello because 101 key 
        // is already present in ConcurrentHashMap object 
        m.putIfAbsent(101, "Hello"); 
  
        // We can remove entry because 101 key 
        // is associated with For value 
        m.remove(101, "Geeks"); 
  
        // Now we can add Hello 
        m.putIfAbsent(103, "Hello"); 
  
        // We cant replace Hello with For 
        m.replace(101, "Hello", "For"); 
        System.out.println(m); 
    } 
} 
Output:
{100=Hello, 102=Geeks, 103=Hello}

====================================================================================================================================
ThreadLocalClass--->The Java ThreadLocal class enables you to create variables that can only be read and written by the same thread. Thus, even if two threads are executing the same code, and the code has a reference to the same ThreadLocal variable, the two threads cannot see each other's ThreadLocal variables. Thus, the Java ThreadLocal class provides a simple way to make code thread safe that would not otherwise be so.


You create a ThreadLocal instance just like you create any other Java object - via the new operator. Here is an example that shows how to create a ThreadLocal variable:

private ThreadLocal threadLocal = new ThreadLocal();
This only needs to be done once per thread. Multiple threads can now get and set values inside this ThreadLocal, and each thread will only see the value it set itself.

Set ThreadLocal Value
Once a ThreadLocal has been created you can set the value to be stored in it using its set() method.

threadLocal.set("A thread local value");
Get ThreadLocal Value
You read the value stored in a ThreadLocal using its get() method. Here is an example obtaining the value stored inside a Java ThreadLocal:

String threadLocalValue = (String) threadLocal.get();
Remove ThreadLocal Value
It is possible to remove a value set in a ThreadLocal variable. You remove a value by calling the ThreadLocal remove() method. Here is an example of removing the value set on a Java ThreadLocal:

threadLocal.remove();
Generic ThreadLocal
You can create a ThreadLocal with a generic type. Using a generic type only objects of the generic type can be set as value on the ThreadLocal. Additionally, you do not have to typecast the value returned by get(). Here is a generic ThreadLocal example:

private ThreadLocal<String> myThreadLocal = new ThreadLocal<String>();
Now you can only store strings in the ThreadLocal instance. Additionally, you do not need to typecast the value obtained from the ThreadLocal:

myThreadLocal.set("Hello ThreadLocal");

String threadLocalValue = myThreadLocal.get();
Initial ThreadLocal Value
It is possible to set an initial value for a Java ThreadLocal which will get used the first time get() is called - before set() has been called with a new value. You have two options for specifying an initial value for a ThreadLocal:

Create a ThreadLocal subclass that overrides the initialValue() method.
Create a ThreadLocal with a Supplier interface implementation.
I will show you both options in the following sections.

Override initialValue()
The first way to specify an initial value for a Java ThreadLocal variable is to create a subclass of ThreadLocal which overrides its initialValue() method. The easiest way to create a subclass of ThreadLocal is to simply create an anonymous subclass, right where you create the ThreadLocal variable. Here is an example of creating an anonymous subclass of ThreadLocal which overrides the initialValue() method:

private ThreadLocal myThreadLocal = new ThreadLocal<String>() {
    @Override protected String initialValue() {
        return String.valueOf(System.currentTimeMillis());
    }
};    
Note, that different threads will still see different initial values. Each thread will create its own initial value. Only if you return the exact same object from the initialValue() method, will all threads see the same object. However, the whole point of using a ThreadLocal in the first place is to avoid the different threads seeing the same instance.

Provide a Supplier Implementation
The second method for specifying an initial value for a Java ThreadLocal variable is to use its static factory method withInitial(Supplier) passing a Supplier interface implementation as parameter. This Supplier implementation supplies the initial value for the ThreadLocal. Here is an example of creating a ThreadLocal using its withInitial() static factory method, passing a simple Supplier implementation as parameter:

ThreadLocal<String> threadLocal = ThreadLocal.withInitial(new Supplier<String>() {
    @Override
    public String get() {
        return String.valueOf(System.currentTimeMillis());
    }
});
Since Supplier is a functional interface, it an be implemented using a Java Lambda Expression. Here is how providing a Supplier implementation as a lambda expression to withInitial() looks:

ThreadLocal threadLocal = ThreadLocal.withInitial(
        () -> { return String.valueOf(System.currentTimeMillis()); } );
As you can see, this is somewhat shorter than the previous example. But it can be made even a bit shorter yet, using the most dense syntax of lambda expressions:

ThreadLocal threadLocal3 = ThreadLocal.withInitial(
        () -> String.valueOf(System.currentTimeMillis()) );
Lazy Setting of ThreadLocal Value
In some situations you cannot use the standard ways of setting an initial value. For instance, perhaps you need some configuration information which is not available at the time you create the ThreadLocal variable. In that case you can set the initial value lazily. Here is an example of how setting an initial value lazily on a Java ThreadLocal:

public class MyDateFormatter {

    private ThreadLocal<SimpleDateFormat> simpleDateFormatThreadLocal = new ThreadLocal<>();

    public String format(Date date) {
        SimpleDateFormat simpleDateFormat = getThreadLocalSimpleDateFormat();
        return simpleDateFormat.format(date);
    }
    
    
    private SimpleDateFormat getThreadLocalSimpleDateFormat() {
        SimpleDateFormat simpleDateFormat = simpleDateFormatThreadLocal.get();
        if(simpleDateFormat == null) {
            simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            simpleDateFormatThreadLocal.set(simpleDateFormat);
        }
        return simpleDateFormat;
    }
}
Notice how the format() method calls the getThreadLocalSimpleDateFormat() method to obtain a Java SimpleDatFormat instance. If a SimpleDateFormat instance has not been set in the ThreadLocal, a new SimpleDateFormat is created and set in the ThreadLocal variable. Once a thread has set its own SimpleDateFormat in the ThreadLocal variable, the same SimpleDateFormat object is used for that thread going forward. But only for that thread. Each thread creates its own SimpleDateFormat instance, as they cannot see each others instances set on the ThreadLocal variable.

The SimpleDateFormat class is not thread safe, so multiple threads cannot use it at the same time. To solve this problem, the MyDateFormatter class above creates a SimpleDateFormat per thread, so each thread calling the format() method will use its own SimpleDateFormat instance.

Using a ThreadLocal with a Thread Pool or ExecutorService
If you plan to use a Java ThreadLocal from inside a task passed to a Java Thread Pool or a Java ExecutorService, keep in mind that you do not have any guarantees which thread will execute your task. However, if all you need is to make sure that each thread uses its own instance of some object, this is not a problem. Then you can use a Java ThreadLocal with a thread pool or ExecutorService just fine.

Full ThreadLocal Example
Here is a fully runnable Java ThreadLocal example:

public class ThreadLocalExample {

    public static void main(String[] args) {
        MyRunnable sharedRunnableInstance = new MyRunnable();

        Thread thread1 = new Thread(sharedRunnableInstance);
        Thread thread2 = new Thread(sharedRunnableInstance);

        thread1.start();
        thread2.start();

        thread1.join(); //wait for thread 1 to terminate
        thread2.join(); //wait for thread 2 to terminate
    }

}
public class MyRunnable implements Runnable {

    private ThreadLocal<Integer> threadLocal = new ThreadLocal<Integer>();

    @Override
    public void run() {
        threadLocal.set( (int) (Math.random() * 100D) );

        try {
            Thread.sleep(2000);
        } catch (InterruptedException e) {
        }

        System.out.println(threadLocal.get());
    }
}
This example creates a single MyRunnable instance which is passed to two different threads. Both threads execute the run() method, and thus sets different values on the ThreadLocal instance. If the access to the set() call had been synchronized, and it had not been a ThreadLocal object, the second thread would have overridden the value set by the first thread.

However, since it is a ThreadLocal object then the two threads cannot see each other's values. Thus, they set and get different values.

InheritableThreadLocal
The InheritableThreadLocal class is a subclass of ThreadLocal. Instead of each thread having its own value inside a ThreadLocal, the InheritableThreadLocal grants access to values to a thread and all child threads created by that thread.



http://tutorials.jenkov.com/java-concurrency/thread-signaling.html


An earlier version of this text had an edition of the MyWaitNotify example class which used a constant string ( "" ) as monitor object. Here is how that example looked:

public class MyWaitNotify{

  String myMonitorObject = "";
  boolean wasSignalled = false;

  public void doWait(){
    synchronized(myMonitorObject){
      while(!wasSignalled){
        try{
          myMonitorObject.wait();
         } catch(InterruptedException e){...}
      }
      //clear signal and continue running.
      wasSignalled = false;
    }
  }

  public void doNotify(){
    synchronized(myMonitorObject){
      wasSignalled = true;
      myMonitorObject.notify();
    }
  }
}
The problem with calling wait() and notify() on the empty string, or any other constant string is, that the JVM/Compiler internally translates constant strings into the same object. That means, that even if you have two different MyWaitNotify instances, they both reference the same empty string instance. This also means that threads calling doWait() on the first MyWaitNotify instance risk being awakened by doNotify() calls on the second MyWaitNotify instance.work like static synchronization.
======================================================================================================================================
StringJoiner--->to join strings with delimitter,


StringJoiner joiner = new StringJoiner(delimitter);
joiner.add(string);

StringJoiner joiner = new StringJoiner(delimitter,prefix, suffix);


it works under string join method--->


==============================================================================================================================
Stream concat() method
Syntax
static <T> Stream<T> concat(Stream<? extends T> firstStream,
                            Stream<? extends T> secondStream)
This method creates a lazily concatenated stream whose elements are all the elements of the firstStream followed by all the elements of the secondStream.
The resulting stream is ordered if both of the input streams are ordered.
The resulting stream is parallel if either of the input streams is parallel.
When the resulting stream is closed, the close handlers for both input streams are invoked.

Stream<Integer> firstStream = Stream.of(1, 2, 3);
        Stream<Integer> secondStream = Stream.of(4, 5, 6);
         
        Stream<Integer> resultingStream = Stream.concat(firstStream, secondStream);
         
        System.out.println( resultingStream.collect(Collectors.toList()) );
		
output--->
[1, 2, 3, 4, 5, 6]

===============================================================================================================================
ForkJoinPool and executor enhancements....


=================================================================================================================================================
Class loading in Java-->

================================================================================================================================================
