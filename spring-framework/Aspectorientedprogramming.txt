Spring AOP (Aspect Oriented Programming) compliments OOPs in the sense that it also provides modularity. 
In OOPs, key unit is Objects, but in AOP key unit is aspects or concerns (simply assume stand-alone modules in your application). 
Some aspects have centralized code but other aspects may be scattered or tangled e.g. logging or transactions. 
These scattered aspects are called cross-cutting concern.
 

A cross-cutting concern is a concern that can affect the whole application and should be centralized in one location in code as possible, 
such as transaction management, authentication, logging, security etc. or we need a common functionality for entire application.

What is the difference between concern and cross-cutting concern in Spring AOP?

Concern is behavior which we want to have in a module of an application. Concern may be defined as a functionality we want to implement to solve a specific business problem. 
E.g. in any eCommerce application different concerns (or modules) may be inventory management, shipping management, user management etc.

Cross-cutting concern is a concern which is applicable throughout the application (or more than one module). 
e.g. logging , security and data transfer are the concerns which are needed in almost every module of an application, hence they are termed as cross-cutting concerns.

AOP breaks the program logic into distinct parts (called concerns). It is used to increase modularity by cross-cutting concerns.

It provides the pluggable way to dynamically add the additional concern before, after or around the actual logic.

Aop never throws any error on console.

AOP concepts and terminologies are as follows:

Join point
Advice
Pointcut
Introduction
Target Object
Aspect
Interceptor
Weaving

*)Join point is any point in your program such as method execution, exception handling, field access etc. Spring supports only method execution join point.join point is actually the method name on which advice works.

*)Advice represents an action taken by an aspect at a particular join point. There are different types of advices:

Before Advice: 			it executes before a join point.
After Returning Advice: 	it executes after a joint point completes normally.
After Throwing Advice: 		it executes if method exits by throwing an exception.
After (finally) Advice: 	it executes after a join point regardless of join point exit whether normally or exceptional return.
Around Advice: 			    This is the most powerful kind of advice. Around advice can perform custom behavior both before and after the method invocation. It's also responsible for choosing whether to proceed to the join point or to shortcut the advised method execution by providing its own return value or throwing an exception.

*)Pointcut:			It is an expression language of AOP that matches join points.mainly on which package

****)Introduction:			It means introduction of additional method and fields for a type. It allows you to introduce new interface to any advised object.

***)Target Object:		It is the object i.e. being advised by one or more aspects. It is also known as proxied object in spring because Spring AOP is implemented using runtime proxies.

*)Aspect:			It is a class that contains advices, joinpoints etc.

***)Interceptor:			It is an aspect that contains only one advice.

****)Weaving:			It is the process of linking aspect with other application types or objects to create an advised object. 
				Weaving can be done at compile time, load time or runtime. Spring AOP performs weaving at runtime.


PROGRAMMATIC APPROACH---->add aspectj jar..

*)We need a class with @Aspect so we can make it Aspect oriented..

*)we need a method(simple) which will work as advice...and we can apply it on any joinpoint..for this we can use different annotation..@before,@After etc..
   				But These annotation also require some parametre..as for what before i have to run or what After..Simple Expression 


The annotations used to create advices are given below:

	@Before declares the before advice. It is applied before calling the actual method.
	@After declares the after advice. It is applied after calling the actual method and before returning result...it is like finally it will run whhether it will run or throw error.
	@AfterReturning . It is applied after calling the actual method returning result succesfuly(NO error). But you can get the result value in the advice.
	@Around declares the around advice. It is applied before and after calling the actual method.oveeride the method.,
	@AfterThrowing declares the throws advice. It is applied if actual method throws exception.
	
	
	we have to declare a class with @aspect with following functionality to work.

Example==>		
 @Before("execution(public String getName())")     //Expression to use this method before any getName() method..
    				public void k(){}

REMEMBER==>for this to all work we have to add <aop:aspectj-autoproxy>       //same annotation-config


@Before("execution(public String a.b/c.AXF.getName())")     //Expression to use this method before any getName() method of ..AFX class only
    				public void k(){}

@Before("execution(public String a.b/c.AXF.get*())")     //Expression to use this method before any get() method of ..AFX class only
    				public void k(){}

@Before("execution(public * a.b/c.AXF.get*())")     //Expression to use this method before any get() method of ..AFX class only whatever its return type doent matter
    				public void k(){}

@Before("execution(public String a.b/c.AXF.get*(..))")    //Expression to use this method before any get() method of..AFX class only which can vae zero or any arguments..use * for not zero
    				public void k(){}


*)NOw if many methods have same expression we dont have to declare it again and again..so for this we use @pointcut and than just call that method name which have pointcut expression..

Example==>

@Pointcut("execution(* Operation.*(..))")  
private void doSomething() {}  
The name of the pointcut expression is doSomething(). It will be applied on all the methods of Operation class regardless of return type.

Understanding Pointcut Expressions
Let's try the understand the pointcut expressions by the examples given below:

@Pointcut("execution(public * *(..))")  
It will be applied on all the public methods.

@Pointcut("execution(public Operation.*(..))")  
It will be applied on all the public methods of Operation class.


@Pointcut("execution(* Operation.*(..))")  
It will be applied on all the methods of Operation class.

@Pointcut("execution(public Employee.set*(..))")  
It will be applied on all the public setter methods of Employee class.

@Pointcut("execution(int Operation..*(..))")  
It will be applied on all the methods of Operation class and is sub class that returns int value.

@Pointcut(args(Circle))  // work for every method which take circle as Parametre/Arguments

@Pointcut(within(Circle))  // work for every method in circle class

We can also us &&(AND operator) on any advice to call combinations of Pointcuts..

*)Now If we r using within in pointcut that means we r calling every method of tha class..so what will we print in logging which method we r calling...So for this we use joinpoints

		JoinPoints-->Its nothing but have the information of all methods on which we r using advice

		Example--> @Before("execution(* * *())
                           public void A(JoinPoint joinpoint)
                           {
				syso(joinpoint.toString());        // it will print which method of which class we have called
                           }

Another powerful use of joinpoints...
		Object obj=(Object)joinpoint.getTarget();         //we can also get any target obj from joinpoints whose method is called


*)Now if we want to print arguments in logger...
   
@Before(args(circle))
public void Hello(Circle circle)
{
syso(circle.toString())  // in this we are telling Spring call any method which has circle parametre of type Circle...and prints its detail
}



we can call pontcut directly-->
@Before("info()")///info is a pointcut here.
###################Remember==>Aspect j not working if we r using di through xml...


@Afterreturning(pointcut="args(circle)",returning="returningString") //it should be same with args.
public void Hello(Circle circle,String returnString)                 //return type should also be same.
{
syso(circle.toString()+returnString));  // in this we are telling Spring call any method which has circle parametre of type Circle...and prints its detail with its return value..
}																		whose return Type is only String..


@Afterthrowing(pointcut="args(circle)",throwing="ex")
public void Hello(Circle circle,Exception ex)   // the name should be same of the exception will be thrown.
{
syso(circle.toString()+ex));  // in this we are telling Spring call any method which has circle parametre of type Circle...and if any exception throws...print that,
}





*)Around advice===>it is compulsory that this advice takes ProceedingJoinPoint as a parametre...ProceedingJoinPoint subclass of jointpoint.
Example

@Around(//pointcut)
public void Hello(ProceedingJoinPoint proceedingJoinPoint )
{

//whatever u right here runs before that pointcut

proceedingJoinPoint.proceed();   // thats actually runs the actual target method on which we r applying that advice

//whatever u right here runs after that pointcut
}

You can also put try and catch around proceed() method...if you want to catch any error while proceeding that target..
And if taget value returns any value u can also collect it===>String returning=proceedingJoinPoint.proceed()   // gives back whatever target method returns..


nice...




-----------------------------------------------------------------------------------------------------------------------------

Implementing a Custom Spring AOP Annotation--->

What Is an AOP Annotation?
To quickly summarize, AOP stands for aspect orientated programming. Essentially, it is a way for adding behavior to existing code without modifying that code.


1)Creating Our Custom Annotation
The annotation we are going to create is one which will be used to log the amount of time it takes a method to execute. Let's create our annotation:

@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
public @interface LogExecutionTime {

}

The @Target annotation tells us where our annotation will be applicable. Here we are using ElementType.Method, which means it will only work on methods. If we tried to use the annotation anywhere else, then our code would fail to compile. This behavior makes sense, as our annotation will be used for logging method execution time.


And @Retention just states whether the annotation will be available to the JVM at runtime or not. By default it is not, so Spring AOP would not be able to see the annotation. This is why it's been reconfigured



2)Creating Our Aspect

@Aspect
@Component
public class ExampleAspect {


@Around("@annotation(LogExecutionTime)")   //calling on our aanotation with this name.
public Object logExecutionTime(ProceedingJoinPoint joinPoint) throws Throwable {
    long start = System.currentTimeMillis();

    Object proceed = joinPoint.proceed();   //caling method.

    long executionTime = System.currentTimeMillis() - start;

    System.out.println(joinPoint.getSignature() + " executed in " + executionTime + "ms");
    return proceed;
}
}


First, we have annotated our method with @Around. This is our advice, and around advice means we are adding extra code both before and after method execution. There are other types of advice, such as before and after but they will be left out of scope for this article.

Next, our @Around annotation has a point cut argument. Our pointcut just says, ‘Apply this advice any method which is annotated with @LogExecutionTime.' There are lots of other types of pointcuts, but they will again be left out if scope.


Now, let's try annotating a method with @LogExecutionTime, and then executing it to see what happens. Note that this must be a Spring Bean to work correctly:

@LogExecutionTime
public void serve() throws InterruptedException {
    Thread.sleep(2000);
}
After execution, we should see the following logged to the console:

void org.baeldung.Service.serve() executed in 2030ms
