import com.amway.core.model.*;
import java.util.*;
import de.hybris.platform.core.Registry;
import de.hybris.platform.servicelayer.search.FlexibleSearchQuery;
import de.hybris.platform.servicelayer.search.FlexibleSearchService;
import de.hybris.platform.servicelayer.search.SearchResult;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.collections4.CollectionUtils;
import java.util.stream.Collectors;
import java.lang.*;
void addColumn(FileWriter fileWriter,String entry)
{
try
{
if(StringUtils.isNotBlank(entry) && entry.contains(",")){
entry = entry.replace(",", StringUtils.EMPTY);
}
fileWriter.append(entry);
fileWriter.append(",");
}
catch(Exception e)
{
e.printStackTrace();
}


}

try{
def strDate="2021-03-11 04:00:00";
def aheadDate="2021-03-11 23:59:59";
String query="select {e.pk} from {IndPartnerOrderInfo as e} where {e.creationtime}>='"+strDate+"' and {e.creationtime}<='"+aheadDate+"' ORDER BY {e.creationtime} ASC";

final SearchResult<IndPartnerOrderInfoModel> eventSearchResult = ((FlexibleSearchService) Registry.getApplicationContext().getBean("flexibleSearchService")).search(query);

final List<IndPartnerOrderInfoModel> eventResults = eventSearchResult.getResult();

println query;
println "resultsize==>"+eventResults.size();
String fileName ="/opt/hybris/data/amway/reports/momspresso/momspressoReport"+strDate+".csv";

FileWriter fileWriter = new FileWriter(fileName);

fileWriter.append("Mobile, Products Added, MomspressoCartId, creation time,isOrderPlaced,orderStatus,order Code,UserType,isRepeatedCustomer,isUserRegisteredorExistingUser,BusinessNature,AccountNO");

fileWriter.append("\n");
if(CollectionUtils.isNotEmpty(eventResults))
{
for(IndPartnerOrderInfoModel orderInfo: eventResults)
{
String mobile = StringUtils.EMPTY;
Map<String,String> productsAddedIntoCartThroughMomspresso = new HashMap<>();
String momspressoCartId =StringUtils.EMPTY;
String requestCreationTime =StringUtils.EMPTY;
String orderNumber ="Order Not Placed";
String UserType ="Momspresso User";
boolean isRepeatedCustomer =false;
String isUserRegisteredorExistingUser="NOT REGISTERED";
String AccountNO ="NOT REGISTERED";
boolean isOrderPlaced =false;
String orderStatus="Order Not Placed";
String bNature = "User Not Registered";

IndPartnerUserInfoModel partner = orderInfo.getIndPartnerUserInfo();
def business = partner.getUserType();
if(null!=business)
{
def businessNatur=business.getCode();
if((StringUtils.equalsIgnoreCase(businessNatur, "AmwayBusinessNature_1"))||(StringUtils.equalsIgnoreCase(businessNatur, "AmwayBusinessNature_2"))||(StringUtils.equalsIgnoreCase(businessNatur, "AmwayBusinessNature_7")))
{
continue;
}
}
mobile =partner.getIdentifier();
momspressoCartId =orderInfo.getPartnerCartCode();
requestCreationTime=orderInfo.getCreationtime().toString();
productsAddedIntoCartThroughMomspresso=orderInfo.getOrderInfo();
if(partner.getIndPartnerOrderInfo().size()>1)
{
isRepeatedCustomer=true;
}
orderNumber =orderInfo.getOrderCode();
def account = partner.getCustomerAccount();
if(StringUtils.isNotEmpty(orderNumber) && account!=null)
{
isOrderPlaced=true;
def order = account.getPrimaryParty().getOrders().stream().filter({s->StringUtils.equalsIgnoreCase(orderNumber,s.getCode())}).findAny();
if(order.isPresent())
{
orderStatus = order.get().getStatus().getCode();
}
else
{
orderStatus="Order Not Found";
}
}
if(account!=null)
{
AccountNO = account.getCode();
def businessNature = account.getBusinessNature().getCode();
if(StringUtils.equalsIgnoreCase(businessNature, "AmwayBusinessNature_4"))
{
isUserRegisteredorExistingUser = "Existing PC";
UserType = "PC";
bNature = "AmwayBusinessNature_4";
}

if(StringUtils.equalsIgnoreCase(businessNature, "AmwayBusinessNature_17"))
{
isUserRegisteredorExistingUser = "Registered Momspresso User";
bNature = "AmwayBusinessNature_17";
}
}


//println "Mobile =>"+mobile+" | Products Added =>"+productsAddedIntoCartThroughMomspresso + " | MomspressoCartId =>"+momspressoCartId+" | RequestCreationTime =>"+requestCreationTime+" | isOrderPlaced =>"+isOrderPlaced+" | orderStatus =>"+orderStatus+" | orderNumber => "+orderNumber+" | UserType =>"+UserType+" | isRepeatedCustomer =>"+isRepeatedCustomer+" | isUserRegisteredorExistingUser =>"+isUserRegisteredorExistingUser+" | AccountNO. =>"+AccountNO;

try{
addColumn(fileWriter,mobile);
addColumn(fileWriter,productsAddedIntoCartThroughMomspresso.toString());
addColumn(fileWriter,momspressoCartId);
addColumn(fileWriter,requestCreationTime);
addColumn(fileWriter,Boolean.toString(isOrderPlaced));
addColumn(fileWriter,orderStatus);
addColumn(fileWriter,orderNumber);
addColumn(fileWriter,UserType);
addColumn(fileWriter,Boolean.toString(isRepeatedCustomer));
addColumn(fileWriter,isUserRegisteredorExistingUser);
addColumn(fileWriter,bNature);
addColumn(fileWriter,AccountNO);
fileWriter.append("\n");
}
catch(Exception e)
{
e.printStackTrace();
fileWriter.append("\n");
continue;
}
}
}
fileWriter.flush();
}
catch(Exception e)
{
e.printStackTrace();
}
finally {
try {
if(fileWriter != null) {
fileWriter.close();
}
}
catch(Exception e)
{
e.printStackTrace();
}
}