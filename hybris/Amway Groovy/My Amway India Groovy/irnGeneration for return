import de.hybris.platform.core.Registry;
import de.hybris.platform.servicelayer.model.ModelService;
import de.hybris.platform.orderprocessing.model.OrderProcessModel;
import de.hybris.platform.core.model.order.OrderModel;
import de.hybris.platform.processengine.enums.ProcessState;
import de.hybris.platform.servicelayer.search.FlexibleSearchQuery;
import de.hybris.platform.core.enums.OrderStatus;
import de.hybris.platform.core.model.order.*;
import java.util.*;
import com.amway.core.enums.*;
import de.hybris.platform.servicelayer.search.FlexibleSearchService;
import com.amway.indcore.loyalty.service.IndCalculateLoyaltyPointsService;
import de.hybris.platform.commerceservices.search.pagedata.PageableData;
import de.hybris.platform.commerceservices.search.pagedata.SearchPageData;
import de.hybris.platform.core.model.order.OrderModel;
import org.apache.commons.collections4.CollectionUtils;
import de.hybris.platform.servicelayer.search.SearchResult;
import de.hybris.platform.servicelayer.model.ModelService;
import de.hybris.platform.servicelayer.i18n.CommonI18NService;
import de.hybris.platform.store.BaseStoreModel;
import de.hybris.platform.store.services.BaseStoreService;
import de.hybris.platform.site.BaseSiteService;
import de.hybris.platform.cms2.model.site.CMSSiteModel;
import com.amway.indcore.order.strategies.impl.*;
import com.amway.indcommercewebservicesaddon.receipt.facade.*;
import com.amway.indfacades.docgen.print.*;
import com.amway.core.model.invoice.*;
import com.amway.indintegration.docgen.data.*;
import de.hybris.platform.returns.model.*;
import java.util.Optional;
import java.util.stream.Collectors;
import java.io.IOException;
import de.hybris.platform.commerceservices.enums.*;
import org.apache.commons.lang3.StringUtils;

final BaseStoreService baseStoreService = spring.getBean("baseStoreService");
final BaseSiteService baseSiteService = spring.getBean("baseSiteService");
final IndReceiptPrintFacade indReceiptPrintFacade = spring.getBean("indReceiptPrintFacade");

final IndIRNIntegrationStrategyImpl indIRNGenerationStrategy=spring.getBean("indIRNGenerationStrategy");
final ModelService modelService = (ModelService) Registry.getApplicationContext().getBean("modelService");

String query1="select {pk} from {CMSSite as o} where {o.pk} ='"+8796093056040+"'";
final SearchResult<CMSSiteModel> searchResult1 = ((FlexibleSearchService)Registry.getApplicationContext().getBean("flexibleSearchService")).search(query1);
final List<CMSSiteModel> results1 = searchResult1.getResult();
CMSSiteModel cmsSiteModel = results1.stream().findFirst().get();


def baseSiteModel =baseSiteService.getCurrentBaseSite();



baseSiteService.setCurrentBaseSite(cmsSiteModel, true);


try{
String query = "select {pk} from {Order as o JOIN OrderStatus as os on {os.pk} = {o.status}} where {o.creationtime}>='2020-10-01 00:00:01' and {o.creationtime}<='2020-10-22 00:00:01' and {os.code} Not In ('CANCELLED','PAYMENT_FAILED','PAYMENT_NOT_CAPTURED') and {o.code} in ('765760048', '766008660', '766079904', '766138902', '767053593', '767180591', '767244253', '767969958', '767972636', '768454872', '768828074', '770376921', '770975798')";


final SearchResult<OrderModel> searchResult = ((FlexibleSearchService) Registry.getApplicationContext().getBean("flexibleSearchService")).search(query);

final List<OrderModel> results = searchResult.getResult();

println "A";

if(CollectionUtils.isNotEmpty(results))
{

for(OrderModel order :results)
{
try{

def customerTaxDetail = order.getAccount().getPrimaryParty().getTaxCertDetails().stream().filter({e -> Objects.nonNull((e.getTaxType()))&& TaxTypeEnum.GSTIN.getCode().equalsIgnoreCase(e.getTaxType().getCode())}).findFirst();
if ((customerTaxDetail.isPresent() && (order.getDeliveryAddress().getRegion().getGstStateCode().equalsIgnoreCase(customerTaxDetail.get().getCustomer().getDefaultPaymentAddress().getRegion().getGstStateCode()))))
{
println "B";
//generating IRN
order.getReturnRequests().stream().forEach{s->indIRNGenerationStrategy.generateReturnIRN(s);};

modelService.save(order);
modelService.refresh(order);

List<AmwayInvoiceModel> receipts = order.getAmwayInvoices().stream().collect(Collectors.toList());

if(CollectionUtils.isNotEmpty(receipts)) {
List<IndDocGenResponseData> docGenResponseDataList= new ArrayList<>();
def isReprint = false;
for (AmwayInvoiceModel receipt : receipts) {
try{
modelService.refresh(receipt);
List<AmwayInvoiceModel> receiptForB2b = new ArrayList<>();
receiptForB2b.add(receipt);
//calling to docGen
docGenResponseDataList = indReceiptPrintFacade.getPrintDataForOrderDocument(receiptForB2b);
}
catch(Exception e ){
e.printStackTrace();
continue;
}
}

}
}
}
catch(Exception e)
{
e.printStackTrace();
continue;
}
}

}
}
catch(Exception e)
{
e.printStackTrace();
}

println "groovy rocks";

