import de.hybris.platform.core.Registry;
import de.hybris.platform.servicelayer.model.ModelService;
import de.hybris.platform.orderprocessing.model.OrderProcessModel;
import de.hybris.platform.core.model.order.OrderModel;
import de.hybris.platform.processengine.enums.ProcessState;
import de.hybris.platform.servicelayer.search.FlexibleSearchQuery;
import de.hybris.platform.core.enums.OrderStatus;
import de.hybris.platform.core.model.order.*;
import java.util.*;
import com.amway.core.enums.*;
import de.hybris.platform.servicelayer.search.FlexibleSearchService;
import com.amway.indcore.loyalty.service.IndCalculateLoyaltyPointsService;
import de.hybris.platform.commerceservices.search.pagedata.PageableData;
import de.hybris.platform.commerceservices.search.pagedata.SearchPageData;
import de.hybris.platform.core.model.order.OrderModel;
import org.apache.commons.collections4.CollectionUtils;
import de.hybris.platform.servicelayer.search.SearchResult;
import de.hybris.platform.servicelayer.model.ModelService;
import de.hybris.platform.servicelayer.i18n.CommonI18NService;
import de.hybris.platform.store.BaseStoreModel;
import de.hybris.platform.store.services.BaseStoreService;
import de.hybris.platform.site.BaseSiteService;
import de.hybris.platform.cms2.model.site.CMSSiteModel;
import com.amway.indcore.order.strategies.impl.*;
import com.amway.indcommercewebservicesaddon.receipt.facade.*;
import com.amway.indfacades.docgen.print.*;
import com.amway.core.model.invoice.*;
import com.amway.indintegration.docgen.data.*;
import de.hybris.platform.returns.model.*;
import java.util.Optional;
import java.util.stream.Collectors;
import java.io.IOException;
import de.hybris.platform.commerceservices.enums.*;
import org.apache.commons.lang3.StringUtils;

import de.hybris.platform.commerceservices.enums.SalesApplication;
import de.hybris.platform.core.model.order.AbstractOrderModel;
import de.hybris.platform.core.model.order.OrderModel;
import de.hybris.platform.core.model.user.CustomerModel;
import de.hybris.platform.ordersplitting.model.ConsignmentModel;
import de.hybris.platform.returns.model.ReturnEntryModel;
import de.hybris.platform.returns.model.ReturnRequestModel;
import de.hybris.platform.servicelayer.dto.converter.Converter;
import de.hybris.platform.servicelayer.exceptions.BusinessException;
import de.hybris.platform.servicelayer.model.ModelService;
import de.hybris.platform.util.TaxValue;

import java.text.MessageFormat;
import java.text.SimpleDateFormat;
import java.util.*;
import java.io.*;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.BooleanUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;

import com.amway.core.enums.IndIRNStatus;
import com.amway.core.enums.IndReceiptSubTypeEnum;
import com.amway.core.enums.TaxTypeEnum;
import com.amway.core.exceptions.AmwayReceiptException;
import com.amway.core.model.AmwayAccountModel;
import com.amway.core.model.IndReceiptIRNDetailsModel;
import com.amway.core.model.invoice.AmwayInvoiceEntryModel;
import com.amway.core.model.invoice.AmwayInvoiceModel;
import com.amway.core.util.IndDateUtil;
import com.amway.indcore.cart.exceptions.IndOrderConfirmationException;
import com.amway.indcore.model.customer.IndCustomerTaxCertDetailsModel;
import com.amway.indcore.order.strategies.IndIRNIntegrationStrategy;
import com.amway.indcore.receipt.service.IndReceiptService;
import com.amway.lynxcore.account.LynxAccountService;
import com.amway.pwcintegration.constants.IndpwcintegrationConstants;
import com.amway.pwcintegration.einvoice.data.IndEInvoiceCancelRequestData;
import com.amway.pwcintegration.einvoice.data.IndEInvoiceCancelResponseData;
import com.amway.pwcintegration.einvoice.data.IndEInvoiceCancelResponseItemData;
import com.amway.pwcintegration.einvoice.data.IndEInvoiceRequestData;
import com.amway.pwcintegration.einvoice.data.IndEInvoiceResponseData;
import com.amway.pwcintegration.einvoice.service.IndEInvoiceGenerationService;

final BaseStoreService baseStoreService = spring.getBean("baseStoreService");
final BaseSiteService baseSiteService = spring.getBean("baseSiteService");
final IndReceiptPrintFacade indReceiptPrintFacade = spring.getBean("indReceiptPrintFacade");
final IndReceiptService indReceiptService = spring.getBean("indReceiptService");

final IndIRNIntegrationStrategyImpl indIRNGenerationStrategy=spring.getBean("indIRNGenerationStrategy");
final ModelService modelService = (ModelService) Registry.getApplicationContext().getBean("modelService");

String query1="select {pk} from {CMSSite as o} where {o.pk} ='"+8796093056040+"'";
final SearchResult<CMSSiteModel> searchResult1 = ((FlexibleSearchService)Registry.getApplicationContext().getBean("flexibleSearchService")).search(query1);
final List<CMSSiteModel> results1 = searchResult1.getResult();
CMSSiteModel cmsSiteModel = results1.stream().findFirst().get();


def baseSiteModel =baseSiteService.getCurrentBaseSite();



baseSiteService.setCurrentBaseSite(cmsSiteModel, true);

String fileName ="/opt/hybris/data/amway/reports/confirmationFailedInvoices/toUpdateirn.csv";
BufferedReader csvReader = new BufferedReader(new FileReader(fileName));

while ((row = csvReader.readLine()) != null)
{

String[] data = row.split(",");
try{
String query = "select {pk} from {Order} where {code} in ('"+data[0]+"')";

final SearchResult<OrderModel> searchResult = ((FlexibleSearchService) Registry.getApplicationContext().getBean("flexibleSearchService")).search(query);

final List<OrderModel> results = searchResult.getResult();



if(CollectionUtils.isNotEmpty(results))
{

for(OrderModel order :results)
{
try{

SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy");
AmwayInvoiceModel invoice = indReceiptService.findReceiptById(data[1]);
IndReceiptIRNDetailsModel irnDetails = modelService.create(IndReceiptIRNDetailsModel.class);

irnDetails.setAckDate(IndDateUtil.convertStringToDateAndTime(data[2]));
		if (irnDetails.getAckDate() == null)
		{
			irnDetails.setAckDate(invoice.getDate());
		}
		irnDetails.setAckNo(data[3]);
		irnDetails.setIrn(data[4]);
		irnDetails.setSignedQrJson(data[5]);
		irnDetails.setIrnStatus(IndIRNStatus.CREATED);
		modelService.save(irnDetails);
		invoice.setIrnDetails(irnDetails);
		modelService.save(invoice);

modelService.refresh(order);

List<AmwayInvoiceModel> receipts = order.getAmwayInvoices().stream().collect(Collectors.toList());

if(CollectionUtils.isNotEmpty(receipts)) {
List<IndDocGenResponseData> docGenResponseDataList= new ArrayList<>();
def isReprint = false;
for (AmwayInvoiceModel receipt : receipts) {
try{
modelService.refresh(receipt);
List<AmwayInvoiceModel> receiptForB2b = new ArrayList<>();
receiptForB2b.add(receipt);
//calling to docGen
docGenResponseDataList = indReceiptPrintFacade.getPrintDataForOrderDocument(receiptForB2b);
}
catch(Exception e ){
e.printStackTrace();
continue;
}
}

}

}
catch(Exception e)
{
e.printStackTrace();
continue;
}
}

}
}
catch(Exception e)
{
e.printStackTrace();
}
}

println "groovy rocks";