import de.hybris.platform.core.Registry;
import de.hybris.platform.servicelayer.model.ModelService;
import de.hybris.platform.servicelayer.search.FlexibleSearchQuery;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Arrays;
import org.apache.commons.collections4.CollectionUtils;
import de.hybris.platform.servicelayer.search.SearchResult;
import de.hybris.platform.servicelayer.model.ModelService;
import com.amway.indcore.loyalty.service.IndCalculateLoyaltyPointsService;
import de.hybris.platform.commerceservices.search.pagedata.PageableData;
import de.hybris.platform.commerceservices.search.pagedata.SearchPageData;
import de.hybris.platform.core.model.order.OrderModel;
import com.amway.eventstream.model.AmwayEventStagingEntryModel;
import com.amway.eventstream.enums.AmwayEventSyncState;
import com.amway.indfacades.order.payload.*;
import java.util.List;
import java.util.Optional;
import com.google.gson.*;
import de.hybris.platform.commercefacades.product.PriceDataFactory;
import de.hybris.platform.servicelayer.dto.converter.Converter;
import de.hybris.platform.cms2.model.site.CMSSiteModel;
import de.hybris.platform.servicelayer.search.FlexibleSearchService;
import org.apache.commons.collections4.CollectionUtils;
import de.hybris.platform.servicelayer.i18n.CommonI18NService;
import de.hybris.platform.store.BaseStoreModel;
import de.hybris.platform.store.services.BaseStoreService;
import de.hybris.platform.site.BaseSiteService;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.commons.lang.StringEscapeUtils;
import com.amway.eventstream.enums.*;


final CommonI18NService commonI18NService = (CommonI18NService) Registry.getApplicationContext().getBean(
				"commonI18NService");
				
final BaseStoreService baseStoreService = spring.getBean("baseStoreService");
final BaseSiteService baseSiteService = spring.getBean("baseSiteService");
final PriceDataFactory priceDataFactory = spring.getBean("priceDataFactory");
final Converter<OrderModel, IndOrderPayloadData> indOrderPayloadConverter = spring.getBean("indOrderPayloadConverter");
final ModelService modelService = (ModelService) Registry.getApplicationContext().getBean("modelService");

String query1="select {pk} from {CMSSite as o} where {o.pk} ='"+8796093056040+"'";
final SearchResult<CMSSiteModel> searchResult1 = ((FlexibleSearchService) Registry.getApplicationContext().getBean("flexibleSearchService")).search(query1);
final List<CMSSiteModel> results1 = searchResult1.getResult();
CMSSiteModel cmsSiteModel = results1.stream().findFirst().get();


def baseSiteModel =baseSiteService.getCurrentBaseSite();



baseSiteService.setCurrentBaseSite(cmsSiteModel, true);

IndOrderPayloadData indOrderPayloadData=new IndOrderPayloadData();


def orderCode=711435119;
String query="select {pk} from {Order as o} where {o.code} ='"+orderCode+"'";


final SearchResult<OrderModel> searchResult = ((FlexibleSearchService) Registry.getApplicationContext().getBean("flexibleSearchService")).search(query);

final List<OrderModel> results = searchResult.getResult();

OrderModel order = results.stream().findFirst().get();


if(order!=null)
{
try{
indOrderPayloadData=indOrderPayloadConverter.convert(order);
} catch(Exception e)
{return e.printStackTrace();}
}
indOrderPayloadData.setCurrency(order.getCurrency().getSymbol());

ObjectMapper mapper = new ObjectMapper();
      //Converting the Object to JSONString
      String jsonString = mapper.writeValueAsString(indOrderPayloadData);
	  
println StringEscapeUtils.unescapeJava(jsonString);


baseSiteService.setCurrentBaseSite(baseSiteModel, true);
