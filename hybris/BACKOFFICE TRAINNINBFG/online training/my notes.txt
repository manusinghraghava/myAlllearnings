
backoffice -customization-->

first add these properties in local.properties

backoffice.cockpitng.development.mode=true
backoffice.cockpitng.uifactory.cache.enabled=false
backoffice.cockpitng.widgetclassloader.resourcecache.enabled=false
backoffice.cockpitng.resourceloader.resourcecache.enabled=false
backoffice.cockpitng.reset.triggers=login
backoffice.cockpitng.reset.scope=widgets,cockpitConfig
backoffice.cockpitng.hotDeploymant.enabled=true

--------------------------------------------------------------------------------------------------
In Backoffice Framework terminology, cockpits were once called perspectives.so all the new cockpits go into prespective container in UI.

-----------------------------------------------------------------------------------------------
create a extension using yBackoffice.

it will create a new cockpit with the extension name and create a default widget with it if u select default values...

remove it from orchestrator mode because it will not look pretty...

to see it proper in dropdown in backoffice main tab...

go to bookstorecustombackoffice-backoffice-widgets.xml

 <widget-extension widgetId="backofficeMainSlot">
       <widget id="bookstorecustombackoffice-cockpit" widgetDefinitionId="com.hybris.cockpitng.borderlayout”"   ...//definition used for cockpit(class)
            template="false" slotId="perspectives" title="Book Management">                //slot id  is for position
            <setting key="perspectiveImageUrl" value="/cng/images/perspective.png"
                type="String" />
            <setting key="eastClosed" value="true"
                     type="Boolean" />                               ////nothing will come on right side...
        </widget>
    </widget-extension>

if slot id is in widget it is for position..
so above perspective is slot in main...

we can find all definitions via breadboard.



----------------------------------------------------------------------------------------------
widgets -->
as we know it is a mvc module..
m-->definition.xml        estensionName/backoffice/resources/
v-->zul file              estensionName/backoffice/resources/        zk sandbox  can be use for zul
c-->A class               estensionName/backoffice/src/

so for creating a new widgets we need all these file...

Each widget communicate each other via socket..
socket are nothing they are only channels which communicate via messaging..

so to create our widget just copy the existing and modify above three files.


communication between controller and zul file...

<label value = "${widgetModel.KEY}" >       ///model values
<label value = "${widgetController.METHODNAME()}" >       ///Controller methods.

also can access definition settings here...
<label value = "${widgetSettings.KEY}" >                 ///.xml settings key

bi directional mapping is also done between both of them we have to use same id with referrence to property of controller...

Example-->

.zul
<textbox id ="msgInput"/>
.class
private Textbox msgInput;

if we have same type and id....it will map automatically we dont need setter.....


Controller can also access data of .xml file.....by using WidgetInstanceManager...

Example -->
widgetInstanceManager.getWidgetSettings.getBoolean().get("key");
-----------------------------------------------------------------------------------------------
Context in hybris.

1)global context which is define in global-spring.xml
2)Tenant context which is define in every spring.xml per extension...extension in same tenant can access bean from each extension.
3)Web Context-----storefront beans....cannot access from outside storefront...
4)BackOffice Context----->child of web same cannot access from outside.

so every class we create in backoffice extension use @WireVariable to inject service in the controller classes...
@Autowired will not work here...

outside controller if u r using any other class...to inject Bean u have to use BackOfficeSpringUtil.getBean()////method.

-----------------------------------------------------------------------------------------------
Points to be remembered....
1)whatever we give id while declaring widget definition.xml.......we will use that definition id to map widgets...

Context--->
when we declare it into config.xml
we use merge by = type | principal |component    parent ="type|group"

if we use type it will merge by its parent which is closest to heirrarchy.
if we use principal it will merge by group which is closest to herrarchy..
if we use component it will merge by component with same context.

in all three parent is also a mandatory factor.


if we define our own configuration and we want it to be merged with some other...
go into xml and put @mergeable on the property to be merged.

Each widget type can have its own, unique XML format, determined by that widget’s developer, for providing it UI-configuration info. Such XML fragments become the bodies of <context…> entries placed inside <extensionName>/resources/<extensionName>-backoffice-config.xml, where each <context…> entry is intended for a specific widget type


******if we dont specify merge-by it will create new context.


we should define in definition.xml what setting type we r used....and define its value in widgets.xml...
------------------------------------------------------------------------------------------------
Remember path-->

wigets.xml,config. xml   is always inside resources folder.

and other files schema and widgets is inside   custom/backoffice/resources or src.

--------------------------------------------------------------------------------------------------
Configuring our own context--->

a) inside backoffice/reource/schema  create our own xsd.

converting it into java class and xml using jaxB.

now go to config.xml and create our own context...

example--> <context type="Book" component="bookdetailsConfig">
		<bd:details xmlns:bd="http://www.hybris.com/backoffice/config/hybris/training"
			xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			xsi:schemaLocation="http://www.hybris.com/backoffice/config/hybris/training ../backoffice/resources/schemas/config/details.xsd ">
			<bd:property name="name" label="Title" />
			<bd:property name="authors" label="Authors" />
			<bd:property name="ISBN10" label="ISBN10" />
			<bd:property name="ISBN13" label="ISBN13" />
			<bd:property name="description" label="Description" />
		</bd:details>
	</context>
	

now to use above configuration in our widget controller...

Open the definition.xml file for your widget and add a new setting called propertiesConfigContext.

<setting key="propertiesConfigContext" type="String" />...

now we have to load this configuration...in controller

-------------------------------------------------------------------------------------------------
Loading Configuration in backoffice-->

protected Base loadConfiguration(final String typeCode)
	{
		Base config = null;

		final DefaultConfigContext configContext = new DefaultConfigContext(
				getWidgetSettings().getString(WIDGET_SETTING_CONFIG_CONTEXT));  ///creating context by id which define in definition.xml settings
		configContext.setType(typeCode);                                        /// defining type to be merged either with principal or type

		try
		{
			config = getWidgetInstanceManager().loadConfiguration(configContext, Base.class);  //passing class which hold configuration.

			if (config == null)
			{
				LOG.warn("Loaded UI configuration is null. Ignoring.");
			}
		}
		catch (final CockpitConfigurationNotFoundException ccnfe)
		{
			LOG.info("Could not find UI configuration for given context (" + configContext + ").", ccnfe);
		}
		
------------------------------------------------------------------------------------------------------
SO whatever we deine in context it used by controller to create view...

so simple flow-->
a)create your own xsd convert it to xml....convert it into java also...
b)xml configuration is used via config.xml to create context or if we want to merge and give values to new properties..
c)java file is used via controller to load these values into java file which is further passed to zul file for dynamic values.

===================================================================================================================
Editors in BackOffice-->

a)


===================================================================================================================
-------------------------------------------------------------------------------------------------
1)how to add new tab with some attributes in backoffice?
example-->lets we want to add new attributes in customer type with a new tab in backoffice configuration.

a)add attributes in existing item type-->

<itemtype code="Customer" generate="false" autocreate="false">
    <attributes>
        <attribute qualifier="grandFatherName" type="java.lang.String">
            <modifiers/>
            <persistence type="property"/>
        </attribute>
        <attribute qualifier="grandMotherName" type="java.lang.String">
            <modifiers/>
            <persistence type="property"/>
        </attribute>
    </attributes>
</itemtype>

b)ant all & system update...

c)now create a extension with the template yBackOffice.

d)add it into local extensions.

e)now go to customExtension-backoffice-config.xml. and aa these tags..

<config xmlns="http://www.hybris.com/cockpit/config"
		xmlns:na="http://www.hybris.com/cockpitng/config/notifications"
		xmlns:y="http://www.hybris.com/cockpit/config/hybris"
		xmlns:wz="http://www.hybris.com/cockpitng/config/wizard-config"
		xmlns:df="http://www.hybris.com/cockpitng/component/dynamicForms"
		xmlns:cb="http://www.hybris.com/cockpitng/config/collectionbrowser"
		xmlns:explorer-tree="http://www.hybris.com/cockpitng/config/explorertree"
		xmlns:dnd="http://www.hybris.com/cockpitng/component/dragAndDrop"
		xmlns:ysl="http://www.hybris.com/cockpitng/config/simplelist"
		xmlns:lv="http://www.hybris.com/cockpitng/component/listView"
		xmlns:ful="http://www.hybris.com/cockpitng/config/fulltextsearch"
		xmlns:sv="http://www.hybris.com/cockpitng/component/summaryview"
		xmlns:ql="http://www.hybris.com/cockpitng/component/quick-list"
		xmlns:vc="http://www.hybris.com/cockpitng/component/valuechooser"
		xmlns:editorArea="http://www.hybris.com/cockpitng/component/editorArea">
	<context merge-by="type"  type="Customer" component="editor-area">   ///here we are doing opts on customer type ///component is the context widget 
		<editorArea:editorArea>
			<editorArea:tab  name="hmc.tab.customer.custom" position="1">   //it is tab name which we will declare in properties file
				<editorArea:section name="hmc.section.customer.attributes"> //it is section name
					<editorArea:attribute qualifier="grandFatherName" />    //adding new attributes
					<editorArea:attribute qualifier="grandMotherName" />
				</editorArea:section>
			</editorArea:tab>
		</editorArea:editorArea>
	</context>
</config>


g)now add new properties for localization of new attributes in customBackofficeExtension-locales_en.properties

type.customer.grandFatherName.name = GrandFather
type.customer.granMothherName.name = GrandMother

h)now add new localization for newly added tag and section for prespective properties file...like  labels_en.properties

hmc.tab.customer.custom=Training Custom
hmc.section.customer.attributes= Training Attributes

i)now do ant all and server up..

j)now open backoffice and reset configuration by using f4.

---------------------------------------------
2)now adding attributes in the existing tab.

as same as above just search the existing name of tab and section..

---------------------------------------------------
how to create a tree node in backoffice?

add a new node training product which will open training product type...and implement simple search and advance search...and list view

a)so create a new type first?

Deployment table should not be defined for any Item type if there is already a deployment defined for its super type otherwise it will decrease the performance as it has to perform multiple joins while retrieving.


<config xmlns="http://www.hybris.com/cockpit/config"
		xmlns:editorArea="http://www.hybris.com/cockpitng/component/editorArea"
		xmlns:list-view="http://www.hybris.com/cockpitng/component/listView"
		xmlns:advanced-search="http://www.hybris.com/cockpitng/config/advancedsearch"
		xmlns:df="http://www.hybris.com/cockpitng/component/dynamicForms"
		xmlns:dsb="http://www.hybris.com/cockpitng/config/dashboard"
		xmlns:explorer-tree="http://www.hybris.com/cockpitng/config/explorertree"
		xmlns:grid-view="http://www.hybris.com/cockpitng/component/gridView"
		xmlns:na="http://www.hybris.com/cockpitng/config/notifications"
		xmlns:simple-search="http://www.hybris.com/cockpitng/config/simplesearch"
		xmlns:wz="http://www.hybris.com/cockpitng/config/wizard-config"
		xmlns:y="http://www.hybris.com/cockpit/config/hybris">
	</context>
	<context component="explorer-tree" module="trainingBackoffice" merge-by="module">  // here we r using explorer-tree component
		<n:explorer-tree xmlns:n="http://www.hybris.com/cockpitng/config/explorertree">
			<n:navigation-node id="Training_Product">            ////this is the node which will create
				<n:type-node code="TrainingProduct" id="TrainingProduct"/>   ///this is type node with id which will show there
			</n:navigation-node>                                             //// we can add multiple nodes also for types
		</n:explorer-tree>
	</context>
	<context type="TrainingProduct" component="listview" merge-by="type" parent="GenericItem">   //...for list view
		<list-view:list-view>
			<list-view:column qualifier="code" />                         ///these attribute will show after search
			<list-view:column qualifier="name" />
			<list-view:column qualifier="description" />
		</list-view:list-view>
	</context>
	<context type="TrainingProduct" component="advanced-search" merge-by="type"   
			 parent="GenericItem">
		<advanced-search:advanced-search>
			<advanced-search:field-list>///these will have the search fields of advance search and make a correct search on operator
				<advanced-search:field name="code" operator="equals" selected="true" />
				<advanced-search:field name="name" operator="equals" selected="true" />  //selected means it will show on advance search.
				<advanced-search:field name="description" operator="equals" selected="true"/>
			</advanced-search:field-list>
		</advanced-search:advanced-search>
	</context>
	<context type="TrainingProduct" component="simple-search" merge-by="type" parent="GenericItem">
		<simple-search:simple-search>
			<simple-search:field name="code" />   ////simple search will be done only on code
		</simple-search:simple-search>
	</context>
</config>


here component is actually the cnfgContext we declare in widget.xml
Example-->

<setting key="explorerTreeConfigCtx" type="String" value="bcb-explorer-tree" />
----------------------------------------------------------------------------

how to add a new type in existing tree node?

we just had to do same above configuration with navigation-node id...


--------------------------------------------------------------------------------
widgets in backoffice customization?

 As an example, you are going to create a simple search widget made up of a text box and Search button.
 
 a)To make changes in ZUL files visible after page refresh, including changes to custom CSS files:
Change the following properties, then restart the server:

local.properties

backoffice.cockpitng.additionalResourceLoader.enabled=true
backoffice.cockpitng.uifactory.cache.enabled=false
backoffice.cockpitng.widgetclassloader.resourcecache.enabled=false
backoffice.cockpitng.resourceloader.resourcecache.enabled=false


a)create a definition first.

Procedure
In myextension/backoffice/resources/widgets directory create a new folder called mysearch.
In the mysearch folder, create a definition.xml file.
Add information about the search widget.
You can provide information like name, description, default title, author, and version. Each widget must have a unique ID made up of the extension and widget names. For this tutorial, the widget ID is org.myextension.widgets.mysearch.


<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>

<widget-definition id="org.myextension.widgets.mysearch" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.hybris.com/schema/cockpitng/widget-definition.xsd">

	<name>My Search</name>
	<description>My own search widget.</description>
	<defaultTitle>Search</defaultTitle>
	<author>Me</author>
	<version>0.1</version>

</widget-definition>
Caution
Unique widget ID and unique folder name required


b)Creating a Widget View
The view of this widget is defined in a ZK ZUL file, named after the last part of the widget ID as specified in the definition.xml (in this case mysearch.zul).

In the mysearch folder, create the mysearch.zul file.
Add the text box and button components, providing an ID for each, along with a button label.
Your mysearch.zul file should look more or less like the following example.

<widget xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.zkoss.org/2005/zul">
	<style src="${wr}/default.css"/>
	<div>
		<hlayout>
		<textbox id="searchInput"/>
		<button id="searchBtn" label="Search"/>
		</hlayout>
	</div>
</widget>


c)Deploying the Widget
Now, the newly created widget needs to get deployed.restart server and check in backoffice via f4.

d)now we have to write logic for search to work.

write a service -->
public class SearchService
{
	public List<String> search(final String text)
	{
		List<String> result = new ArrayList<String>();
		result.add(text);
		result.add("Hello");
		result.add("Cockpit NG");
		result.add("Developer");

		return result;
	}
}

define it---><bean id="searchService" class="org.myextension.SearchService"></bean>


Creating a Controller
The newly created widget requires a widget controller.

In myextension/backoffice/src/org/myextension, create a controller

public class MySearchController extends DefaultWidgetController
{
	private Textbox searchInput;

	@WireVariable
	private SearchService searchService;

	@ViewEvent(componentID = "searchBtn", eventName = Events.ON_CLICK)    //view event for this component
	public void doSearch() throws InterruptedException
	{
		List<String> result = searchService.search(searchInput.getText());
		Messagebox.show(result.get(0));
	}
}



************&&&&&&&&&&&&&&&&&&&&&&&&&&main important &&&&&&&&&&&&&&&&&&&&&###############@@@@@@@@@@

Add a controller class in definition.xml (the one located in myextension/backoffice/resources/widgets/mysearch directory).
definition.xml

<!-- ... -->
 <controller class="org.myextension.widgets.mysearch.MySearchController"/>
<!-- ... -->
</widget-definition>

e)build again and refresh Backoffice.


-------------------------------------------
---------------------------------------------

Passing Data Between Widgets?

Widgets communicate with each other through sockets. 

From a technical point of view, the chat widget should have one input and one output:

Input: Incoming message.
Output: A message sent out after clicking the button Send.

-------------------------------
Every widget has its id u can check it via f4. and than search in code..,to change the dault values ...copy the already exist code from widget.xml to your customized widget.xml with same id and override it...





--------------------------------
final StringJoiner joiner = new StringJoiner(", ");
		book.getAuthors().forEach(a -> joiner.add(a.getName()));
		final String authors = joiner.toString();


-----------------------------------------------------------------------------------------------------------------------
for fab india i have to create extra widget to see variant value category and download all in excel file.